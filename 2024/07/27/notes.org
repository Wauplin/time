* Ideas of the day

If I am to spend my time on a project, it needs to meet certain criteria.
When we use a project, we give it resources, time, and space, memory and compute.
This is an investment.
We can think of this as activation of a meme, giving it life. 

We need to hold the projects to the standards of investment, imagine we are giving
them money or staking them by using them or depending on them.

** Fitness

Here are the criteria that I use for selecting software:

**** Rule abiding

Does the project publish, follow any rules?
Does it have community guidelines?

***** Non discrimination

Is the project committed to being open to all people?

Does the project limit or discriminate between people of any type?

Is there a concept of a good or bad user? are some users preferred over others?

Is there a concept of a good or bad use of the software? Is the usage of the software limited in any way.


**** Documentation quality

Well-documented projects are often easier to maintain and contribute to.
Is the documentation written using open standards? Can it be built from scratch?
Are key documents hosted on non free plaforms like medium or youtube?
Can we access them without logging in or giving up privacy?

**** Industry standards
Check the project's alignment with industry standards or best practices in its domain.


**** Governence
Evaluate their governance model and decision-making processes.

**** Well supported
Is the project established, well supported?
Does it have enough developers?
Is the community healthy?
Are the pull requests reviewed?

***** Update frequency

Consider the project's update frequency and responsiveness to security vulnerabilities as additional metrics.

*** Engagement

Is there engagement with the contributors?

Do the project leaders listen and understand the contributors?
Do the contibutors stay in the project or leave?
Are the pull requests reviewed?
Is there any engagement on a detailed level, line by line?
Are the patches ignored?
Are the bug reports ignored?
If we send in something to the project, does it respond appropriately?
Are the contributors treated fairly?

*** Tracking and data collection

Does the software track user behaviour by default? (opt in vs opt out)
Does the software respect the users privacy?
Does it require cloud services to run?
Can we host them ourselves?

For more good questions, see for example https://f-droid.org/en/docs/Inclusion_Policy/

*** Free/Libre Open Source Software

Is there a commitment to freedom, sharing and openess?

Are there any end user license agreements needed to use the software?

Is the license reviewed and accepted by a third party? for example the open source initiative?

I prefer to use only open source software, but do make compromises.

Is this commitment long or short term?
Can that commitment be changed?
Is there a foundation commited to the survival of the project that is sustainable?

**** Exceptions

***** NVIDIA software CUDA drivers
Currently there is no way around using CUDA for advanced machine learning.

***** cloud services when needed

I have used AWS,GCP,Azure as needed in projects. Kubernetes offers a way to abstract out the details
of the cloud providers into a cloud native api that is a good step.x

*** Quality systems

Each person, group, company, meme, software or project needs its own "fitness" or quality function that determines how "healthy" or good it is,
That is the quality system.

If a system does not have a fitness function, it needs to create a plan to implement one.

**** Are there pre-commit hooks?

Can bad code be pushed to the repository?

**** Are there procedures for testing?

Is it clear how you can test the code?

**** Are the failing tests being acted upon?

Are the checks being acted upon?
Are the errors levels trending down or up?

*** Secure

The system needs to implement security best practices.

*** Reproducibility

The system needs to be reproducible, built from secure foundations.

That means that the foundation of the system needs to be of sufficient quality, and stability, or be fungible and replaceable (aws cloud via k8s),
or we have no other alternatives (nvidia)

**** Supply chain attacks

***** Switching license

We can consider the usage of "open source" software licence and then changing the license to one that
is no longer granting the same freedoms as a pullback or a form of a supply chain attack.

Examples : litellm, openfaas, hashicorp terraform, etc.

***** Non free core

We can consider the usage of non "open source" software license with the promise to open it one day 
as a form of a supply chain attack, this effectivly captures the audience.

Examples : mojo language

** Automation

To support a project's infrastructure, it needs to be automated.
People make mistakes and any time you have people typing commands
there will be mistakes.
Any time you have to use a user interface no matter how friendly,
it has the possibility of mistake.

So for reproducibility we need to adopt something like terraform for creating
infrastructure. There are tools to generate api calls from recording manual actions in AWS or even
to reverse engineer an existing infrastructure that was manually
created. I think that this idea logically follows from the principles mentioned above.

If you are not able to automate the procedure, then documenting it
with a written procedure is the next best thing.
Tracking changes to the procedure is important.
